import { nano_models, populateTransaction, processTest } from "../test.fixture";

const contractName = "NestedFactory";
const contractAddr = "0xfd896db057f260adce7fd1fd48c6623e023406cd";
const testNetwork = "polygon";

const testLabel = "new simple_withdrawal"; // <= Name of the test
const testDirSuffix = testLabel.toLowerCase().replace(/\s+/g, "_");

// https://polygonscan.com/tx/0xe4fe0311a71bde8db53c5bffdd2698700dfe1ae84a085c6d39c83d6292b5b714
const inputData =
  "0x51227094000000000000000000000000000000000000000000000000000000000000b0c9000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000172370d5cd63279efa6d502dab29171933a610af000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000056c8cbd52bc96d00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020466c617400000000000000000000000000000000000000000000000000000000000000000000000000000000172370d5cd63279efa6d502dab29171933a610af00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000040000000000000000000000000172370d5cd63279efa6d502dab29171933a610af0000000000000000000000000000000000000000000000000056c8cbd52bc96d00000000000000000000000000000009";

const models = [
  {
    name: "nanos",
    steps: 5,
  },
  // {
  // 	name: 'nanox',
  // 	steps: 0
  // },
];

// populate unsignedTx from genericTx and get network chain id
const unsignedTx = populateTransaction(contractAddr, inputData, testNetwork);
// Process tests for each nano models
models.forEach((model) => {
  const nano_model = nano_models.find((nano_model) =>
    nano_model.name === model.name
  );
  processTest(
    nano_model,
    model.steps,
    contractName,
    testLabel,
    testDirSuffix,
    unsignedTx,
    testNetwork,
  );
});
