import { nano_models, processTest, populateTransaction } from "../test.fixture"

const contractName = "NestedFactory";
const contractAddr = "0x9a065e500cdcd01c0a506b0eb1a8b060b0ce1379";
const testNetwork = "bsc";

const testLabel = "BSC create"; // <= Name of the test
const testDirSuffix = testLabel.toLowerCase().replace(/\s+/g, '_');

// https://bscscan.com/tx/0xd788124dd9b119367600d06696a14537f92955c4c303e53ad2c33dd9b545b780
const inputData = "0xa378534b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000429d069189e000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000205a65726f457800000000000000000000000000000000000000000000000000000000000000000000000000007130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000000000007130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000128c43c9ef60000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000041f27ed2a4a8000000000000000000000000000000000000000000000000000000a8b1a9f8935cb00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000000000007130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c869584cd00000000000000000000000010000000000000000000000000000000000000110000000000000000000000000000000000000000000000b9e585de86625b6430000000000000000000000000000000000000000000000000";

const models = [
	{
		name: 'nanos',
		steps: 6
	},
	{
		name: 'nanox',
		steps: 6
	},
	{
		name: 'nanosp',
		steps: 6
	},
]

// populate unsignedTx from genericTx and get network chain id
const unsignedTx = populateTransaction(contractAddr, inputData, testNetwork);
// Process tests for each nano models
models.forEach((model) => {
	const nano_model = nano_models.find((nano_model) => nano_model.name === model.name)
	processTest(nano_model, model.steps, contractName, testLabel, testDirSuffix, unsignedTx, testNetwork)
})